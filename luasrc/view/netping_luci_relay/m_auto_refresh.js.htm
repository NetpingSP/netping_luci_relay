
<%

local config = "netping_luci_relay"

local uci = require "luci.model.uci".cursor()
local util = require "luci.util"
local globals = uci:get_all(config, "globals")

-- Prepare state labels, customized with globals setting

local state_label = {}
for _, s in pairs(globals["state"]) do
	for k, v in s.gmatch(s, "(%d+)\.(.*)") do
		state_label[k] = v
	end	
end

-- Prepare status labels, customized with globals setting

local status_label = {}
for _, s in pairs(globals["status"]) do
	for k, v in s.gmatch(s, "(%d+)\.(.*)") do
		status_label[k] = v
	end	
end


%>	

<script type="text/javascript">
//<![CDATA[

	function sleep(ms) {
	  return new Promise(resolve => setTimeout(resolve, ms));
	}

	function animationWrapper(str) {
		var html = ''
		str = "" + str
		for (c=0; c < str.length; c++) {
			html = html + '<span class="anime">' + str[c] + '</span>'
		}
		return(html)
	}

	async function animate_title(title_id, title_text) {
		var placeholder = '.table-titles .th.' + title_id
		var rendered = document.querySelector(placeholder)

		rendered.innerHTML = animationWrapper(title_text)

		$(placeholder + ' .anime').each(function() {
			var that = $(this);
		    setTimeout(function() { 
		        that.animate({ fontSize: "14px", "font-weight": 100 }, 210 )
		            .animate({ fontSize: "13px", "font-weight": 900 }, 210 );
		    },that.index()*70);
		});	
	}

	async function indicate() {

		// Animate State and Status column headers with short delay
		
		animate_title("state", "Состояние")
		await sleep(500)
		animate_title("status", "Статус")
	}

	/*
	Update interface's elements with operarive data
	*/
	function indication() {
		var payload = null;

		// get labels for State and Status

		var state_label = <%= util.serialize_json(state_label) %>
		var status_label = <%= util.serialize_json(status_label) %>

		XHR.poll(3, '<%=luci.dispatcher.build_url("admin", "system", "relay", "indication")%>', payload,
			function (x) {
				if (!x) {
					return;
				}

				// Update State column's value

				$.each(x.responseJSON["state"], function(id, state) {
					var placeholder = '.td.' + id + '.state'
					var rendered = document.querySelector(placeholder)
					if(rendered != undefined) {
						rendered.innerHTML = state_label[state]
					}
				}) 

				// Update Status column's value

				$.each(x.responseJSON["status"], function(id, status) {
					var placeholder = '.td.' + id + '.status'
					var rendered = document.querySelector(placeholder)
					if(rendered != undefined) {
						rendered.innerHTML = status_label[status]
					}
				}) 

				// Animate titles of Status and State columns

				indicate()

			}
		);
	}

	window.addEventListener('DOMContentLoaded',function(e) {
			
			indication()
			
	},true);
//]]>

</script>


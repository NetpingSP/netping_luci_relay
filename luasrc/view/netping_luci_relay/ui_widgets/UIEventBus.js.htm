<script type="text/javascript">
/*
 * ui.EventBus() is used as communicator between reactive widget on the web page
 * If a widget wants his events to be listened by others, it has to register the events on EventBus
 * Then if some other widgets want to react the first widget state, then they subscribe the appropriate events on EventBus
**/
//<![CDATA[
L.require('ui').then(function(ui) {
	L.require("session").then(function(session){
		L.require('dom').then(function(dom) {
			var UIEventBus = ui.AbstractElement.extend(/** @lends LuCI.ui.Textarea.prototype */ {
				__init__: function() {
					this.timeframe = {
						"po_nocham": {
							enabled: true,
							title: "По ночам",
							dates: ["2020-12-10", "2020-12-12"],
							timeranges: ["8.5,16", "22,7", "12,20"],
							repeat_mode: ["Ежегодно"]
						},
						"po_dnyam_mesyaca": {
							enabled: true,
							title: "По дням месяца",
							dates: ["2020-12-15", "2020-12-16", "2020-12-17", "2020-12-18"],
							timeranges: ["21,6.75"],
							repeat_mode: ["Ежемесячно"]
						}
					}
				},
				/*** Example of data structure
				/*	this.timeframe: {
				 *		"moy_perviy_interval": {
				 *			enabled: true,
				 *			title: "Мой первый интервал",
				 *			dates: [ "YYYY-MM-DD", "YYYY-MM-DD:YYYY-MM-DD" ],
				 *			timeranges: {"<slider_idref_1>": "6.15-18", "<slider_idref_2>": "8-18"},
				 *			repeat_mode: ["Ежемесячно", "Ежегодно", "Еженедельно", "Ежедневно"]
				 *		}
				 *	}
				 */

				/** @override */
				render: function() {
					var divEl = E('div', {
						class: 'event-bus',
						style: 'display: none'
					});
					return this.bind(divEl);
				},

				/** @private */
				bind: function(divEl) {
					this.node = divEl;
					dom.bindClassInstance(divEl, this);
					return divEl;
				},
				addTimeRange: function(start_end="", tab_id="", tab_title="", sliderNode=undefined) {
					if (!(tab_id in this.timeframe)) this.timeframe[tab_id] = { title: tab_title, enabled: true }
					if (!("timeranges" in this.timeframe[tab_id])) this.timeframe[tab_id]["timeranges"] = []
					var parent = sliderNode.parentNode
					var index = Array.prototype.indexOf.call(parent.children, sliderNode)
					if(index >= 0) {
						this.timeframe[tab_id]["timeranges"][index] = start_end
						this.node.dispatchEvent(new CustomEvent("bus-time-slider-changed", {}));
					} else {
						console.log("siderNode is not found in the tab [" + tab_id + "]:", sliderNode)
					}
				},
				removeTimeRange: function(tab_id="", sliderNode=undefined) {
					if ((tab_id in this.timeframe) && sliderNode) {
						var parent = sliderNode.parentNode
						var index = Array.prototype.indexOf.call(parent.children, sliderNode)
						if(index >= 0) {
							this.timeframe[tab_id]["timeranges"].splice(index, 1)
							sliderNode.remove()
							this.node.dispatchEvent(new CustomEvent("bus-time-slider-changed", {}));
						} else {
							console.log("siderNode is not found in the tab [" + tab_id + "]:", sliderNode)
						}
					}
				},
				addRepeatMode: function(repeat=[], tab_id="", tab_title="") {
					if (!(tab_id in this.timeframe)) this.timeframe[tab_id] = { title: tab_title, enabled: true }
					if (!("timeranges" in this.timeframe[tab_id])) this.timeframe[tab_id]["timeranges"] = {}
					if (!("repeat_mode" in this.timeframe[tab_id])) this.timeframe[tab_id]["repeat_mode"] = []
					this.timeframe[tab_id]["repeat_mode"] = repeat
					this.node.dispatchEvent(new CustomEvent("bus-every-period-changed", {}));
				},

				clearRepeatMode: function(tab_id) {
					if(!tab_id) { 
						console.log("tab_id is not defined");
						return;
					}
					this.timeframe[tab_id]["repeat_mode"] = []
					this.node.dispatchEvent(new CustomEvent("bus-every-period-changed", {}));	
				},

				addDates: function(tab_id="", tab_title="", dates=[]) {
					var result = []
					if (!(tab_id in this.timeframe)) this.timeframe[tab_id] = { title: tab_title, enabled: true }
					if (!("timeranges" in this.timeframe[tab_id])) this.timeframe[tab_id]["timeranges"] = {}
					if (!("dates" in this.timeframe[tab_id])) this.timeframe[tab_id]["dates"] = []

					// remove dublicates from array
					this.timeframe[tab_id]["dates"] = dates.filter((item, pos) => dates.indexOf(item) === pos)
					this.node.dispatchEvent(new CustomEvent("bus-dates-changed", {}));
				},

				clearDates: function(tab_id) {
					if(!tab_id) { 
						console.log("tab_id is not defined");
						return;
					}
					this.timeframe[tab_id]["dates"] = []
					this.node.dispatchEvent(new CustomEvent("bus-dates-changed", {}));	
				},

				disableTab: function(tab_title) {
					//ui.tabs.removeTabs()
					ui.tabs.hideTab(tab_title)
					this.timeframe[slug(tab_title)]["enabled"] = false
					this.node.dispatchEvent(new CustomEvent("bus-disable-tab", {}));
				},

				enableTab: function(tab_title) {
					ui.tabs.showTab(tab_title)
					this.timeframe[slug(tab_title)]["enabled"] = true
					this.node.dispatchEvent(new CustomEvent("bus-enable-tab", {}));
				},

				renderTab: function(tab_title) {
					ui.tabs.renderTab(tab_title)
					this.node.dispatchEvent(new CustomEvent("bus-add-tab", {}));
				},

				register: function(source, eventName, sourceEvents=[], callback) {
					this.registerEvents(source, eventName, sourceEvents)
					this.node.addEventListener(eventName, L.bind(function(ev) { 
						return callback(ev)
					}, this))
				},

				register2: function(source, eventName, sourceEvents=[], callback) {
					this.registerEvents(source, eventName, sourceEvents)
					this.node.addEventListener(eventName, L.bind(function(ev) { 
						callback(ev, source)
					}, source))
				},

				register3: function(source, eventName, sourceEvents=[], callback) {
					var dispatchFn = L.bind(function(ev) {
						this.node.dispatchEvent(new CustomEvent(eventName, { 
							bubbles: true,
							srcElement: source
						}));
						callback(source)
					}, this);

					for (var i = 0; i < sourceEvents.length; i++) {
						source.addEventListener(sourceEvents[i], dispatchFn);
					}
				}
			});
			ui["EventBus"] = UIEventBus;
		});
	});
});
//]]>
</script>
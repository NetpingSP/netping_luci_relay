<script type="text/javascript">
//<![CDATA[
L.require('ui').then(function(ui) {
	L.require("session").then(function(session) {
		L.require('dom').then(function(dom) {
			var UIRangeSlider = ui.AbstractElement.extend(/** @lends LuCI.ui.Textarea.prototype */ {
				__init__: function(values, options) {
					this.values 		= values;
					this.input 			= null;
					this.inputDisplay 	= null;
					this.slider 		= null;
					this.sliderWidth	= 0;
					this.sliderLeft		= 0;
					this.pointerWidth	= 0;
					this.pointerR		= null;
					this.pointerL		= null;
					this.activePointer	= null;
					this.selected 		= null;
					this.scale 			= null;
					this.step 			= 0;
					this.tipL			= null;
					this.tipR			= null;
					this.timeout		= null;
					this.valRange		= false;
					this.addLink		= null;
					this.delLink		= null;
					this.tab_idref		= null;
					this.tab_title		= null;
					this.idref 			= null;

					this.options = Object.assign({
						optional: 	true,
						target: 	null,
						values: 	null,
						set: 		null,
						range: 		false,
						width: 		"350px",
						scale:		true,
						labels:		true,
						tooltip:	true,
						step: 		null,
						disabled:	false,
						tab_idref: 	null,
						onChange:	null
					}, options);

					for (var i in values) { 
						if (this.values.hasOwnProperty(i)) {
							this.options[i] = this.values[i]; 
						}
					}

					this.tab_idref = this.options.tab_idref
					this.tab_title = this.options.tab_title
				},

				/** @override */
				render: function() {
					this.input = E('input', { type: "text", style: "display: none;" })
					this.selected = E('div', { class: 'rs-selected' })
					this.selected_from_start = E('div', { class: 'rs-selected-from-start' })
					this.selected_to_end = E('div', { class: 'rs-selected-to-end' })
					this.tipL = E('div', { class: 'rs-tooltip' })
					this.tipR = E('div', { class: 'rs-tooltip' })
					this.pointerL = E('div', { class: 'rs-pointer', "data-dir": "left" }, [
						this.tipL
					])
					this.pointerR = E('div', { class: 'rs-pointer', "data-dir": "right" }, [
						this.tipR
					])
					this.scale = E('div', { class: 'rs-scale' })
					this.result_message = E('div', { class: 'rs-result-message' })
					// this.addLink = E('a', { class: "rs-add-new-slider", style: "color: grey; cursor: pointer;"}, _("Добавить"))
					this.delLink = E('a', { class: "rs-remove-the-slider", style: "float: right; cursor: pointer;" }, _("Удалить"))

					this.slider = E('div', { class: 'rs-container' }, [
						E('div', { class: "rs-bg" }),
						this.selected,
						this.selected_from_start,
						this.selected_to_end,
						this.scale,
						this.pointerL,
						this.pointerR
					]);

					var frameEl = E('div', { 'id': this.options.id, class: "slider-container" }, [
						this.input,
						this.slider,
						this.delLink
						// this.addLink,
						// this.result_message
					]);

					
					this.node = frameEl;
					dom.bindClassInstance(frameEl, this);

					var slider_setting = {
						values: { min: 0, max: 24 },
						step: 0.25,
					    range: true,
					    set: [10, 19],
					    scale: true,
					    labels: true
					}
					

/*
					function showBanner(self) {
						var notesBanner = window.BUS["notesBanner"]	
						notesBanner.show()
						// notesBanner.eventDispatcher('_time-slider-removed', self, notesBanner)
					}
					setTimeout(showBanner, 1000, this)

*/





					this.node.addEventListener('_time-slider-created', L.bind(function(ev) {
						var sPlace = ev.target.parentNode
						var rs = new ui.RangeSlider({ start: 0, end: 24 }, slider_setting)
						var rs_widget = rs.render()
						dom.append(sPlace, rs_widget)
						
						window.EventBus.register3(rs_widget, 'time-slider-changed', [
								'_time-slider-created', 
								'_time-slider-changed',
//								'_time-slider-removed'
							],
							function(ev) {
								var tab = rs.tab_idref,
									title = rs.tab_title,
									slider_id = rs.idref;
								// window.EventBus.addTimeRange(rs.getValue(), tab, title, slider_id)
							}
						);

/*
						window.EventBus.register(this.node, 'time-slider-removed', [
								'_time-slider-removed'
							],
							function(ev) {
								var tab = this.tab_idref,
									slider_id = this.idref;
								window.EventBus.removeTimeRange(tab, slider_id)
							}
						);
*/

					}, this))

/*

					this.node.addEventListener('_time-slider-removed', L.bind(function(ev) { 
						
						window.EventBus.removeTimeRange(this.tab_idref, this.idref)
						// ev.target.remove()
					}, this))
*/

					// this.rendered_widget = frameEl
					this.idref = this.node.getAttribute("data-idref")

					setTimeout(this.setInitialValues, 200, this)

					return frameEl;
				},

				/** @override */
				getValue: function() {
					var inputEl = this.node.querySelector('input');
					return inputEl.value;
				},

				/** @override */
				setValue: function(value) {
					var inputEl = this.node.querySelector('input');
					inputEl.value = value;
				},

				setInitialValues: function (self) {
					self.disabled(self.options.disabled);

					if (self.options.width) self.slider.style.width = parseInt(self.options.width) + 'px';
					self.sliderLeft = self.slider.getBoundingClientRect().left;
					self.sliderWidth = self.slider.clientWidth;
					self.pointerWidth = self.pointerL.clientWidth;

					if (!self.options.scale) self.slider.classList.add(self.cls.noscale);

					if (!self.input) return console.log('Cannot find target element...');

					self.inputDisplay = getComputedStyle(self.input, null).display;
					self.input.style.display = 'none';
					self.valRange = !(self.options.values instanceof Array);

					if (self.valRange) {
						if (!self.options.values.hasOwnProperty('min') || !self.options.values.hasOwnProperty('max'))
							return console.log('Missing min or max value...');
					}

					if (self.valRange) self.options.values = prepareArrayValues(self.options);

					self.values.start = 0;
					self.values.end = self.options.range ? self.options.values.length - 1 : 0;


					if (self.options.set && self.options.set.length && checkInitial(self.options)) {
						var vals = self.options.set;

						if (self.options.range) {
							self.values.start = self.options.values.indexOf(vals[0]);
							self.values.end = self.options.set[1] ? self.options.values.indexOf(vals[1]) : null;
						}
						else self.values.end = self.options.values.indexOf(vals[0]);
					}

					// keep idref of slider
					// and data-tab as data_id
					// self.idref = self.node.getAttribute("data-idref")
					
					// TODO
					// do this with document.querySelector()
					// self.tab_idref = self.node.parentNode.parentNode.parentNode.parentNode.getAttribute("data-tab")
					// self.tab_title = self.node.parentNode.parentNode.parentNode.parentNode.getAttribute("data-tab-title")


					return self.createScale();
				},

				createScale: function (resize) {
					this.step = this.sliderWidth / (this.options.values.length - 1);
					for (var i = 0, iLen = this.options.values.length; i < iLen; i++) {
						var span = createElement('span'),
							ins = createElement('ins');

						span.appendChild(ins);
						this.scale.appendChild(span);

						span.style.width = i === iLen - 1 ? 0 : this.step + 'px';

						if (!this.options.labels) {
							if (i === 0 || i === iLen - 1) ins.innerHTML = this.options.values[i]
						}
						else {
							if (i/4 == Math.round(this.options.values[i]) && (Math.round(this.options.values[i])) % 4 == 0) {
								ins.innerHTML = this.formatTime(this.options.values[i]);
							}
						}

						ins.style.marginLeft = (ins.clientWidth / 2) * - 1 + 'px';
					}
					return this.addEvents();
				},

				formatTime: function (hours) {
						var minutes = "000000" + (hours - Math.floor(hours)) * 60
					return Math.floor(hours) + ":" + minutes.substr(minutes.length-2);
				},

				updateScale: function () {
					this.step = this.sliderWidth / (this.options.values.length - 1);

					var pieces = this.slider.querySelectorAll('span');

					for (var i = 0, iLen = pieces.length; i < iLen; i++)
						pieces[i].style.width = this.step + 'px';

					return this.setValues();
				},

				addEvents: function () {
					var pointers = this.slider.querySelectorAll('.rs-pointer'),
						pieces = this.slider.querySelectorAll('span');

					createEvents(document, 'mousemove touchmove', this.move.bind(this));
					createEvents(document, 'mouseup touchend touchcancel', this.drop.bind(this));

					for (var i = 0, iLen = pointers.length; i < iLen; i++)
						createEvents(pointers[i], 'mousedown touchstart', this.drag.bind(this));

					for (var i = 0, iLen = pieces.length; i < iLen; i++)
						createEvents(pieces[i], 'click', this.onClickPiece.bind(this));

					window.addEventListener('resize', this.onResize.bind(this));

					// add event for "add new slider" and "delete this slider"
					
					// this.registerEvents(this.addLink, '_time-slider-created', ["click"]);
					this.registerEvents(this.delLink, '_time-slider-removed', ["click"]);
					
					this.registerEvents(this.input, '_time-slider-changed', ["input"]);

					return this.setValues();
				},

				drag: function (e) {
					e.preventDefault();

					if (this.options.disabled) return;

					var dir = e.target.getAttribute('data-dir');
					if (dir === 'left') this.activePointer = this.pointerL;
					if (dir === 'right') this.activePointer = this.pointerR;

					return this.slider.classList.add('sliding');
				},

				move: function (e) {
					if (this.activePointer && !this.options.disabled) {
						var coordX = e.type === 'touchmove' ? e.touches[0].clientX : e.pageX,
							index = coordX - this.sliderLeft - (this.pointerWidth / 2);

						index = Math.round(index / this.step);

						if (index <= 0) index = 0;
						if (index > this.options.values.length - 1) index = this.options.values.length - 1;

						if (this.options.range) {
							if (this.activePointer === this.pointerL) this.values.start = index;
							if (this.activePointer === this.pointerR) this.values.end = index;
						}
						else this.values.end = index;

						return this.setValues();
					}
				},

				drop: function () {
					this.activePointer = null;
				},

				setValues: function (start, end) {
					var activePointer = this.options.range ? 'start' : 'end';

					if (start && this.options.values.indexOf(start) > -1)
						this.values[activePointer] = this.options.values.indexOf(start);

					if (end && this.options.values.indexOf(end) > -1)
						this.values.end = this.options.values.indexOf(end);

					this.pointerL.style.left = (this.values[activePointer] * this.step - (this.pointerWidth / 2)) + 'px';

					if (this.options.range) {
						if (this.options.tooltip) {
							this.tipL.innerHTML = this.formatTime(this.options.values[this.values.start]);
							this.tipR.innerHTML = this.formatTime(this.options.values[this.values.end]);
						}
						this.input.value = this.options.values[this.values.start] + ',' + this.options.values[this.values.end];
						this.pointerR.style.left = (this.values.end * this.step - (this.pointerWidth / 2)) + 'px';

					}
					else {
						if (this.options.tooltip)
							this.tipL.innerHTML = this.options.values[this.values.end];
						this.input.value = this.options.values[this.values.end];
					}


					if (this.values.start > this.options.values.length - 1) this.values.start = this.options.values.length - 1;
					if (this.values.end > this.options.values.length - 1) this.values.end = this.options.values.length - 1;
					if (this.values.start < 0) this.values.start = 0;
					if (this.values.end < 0) this.values.end = 0;

					if(this.values.start <= this.values.end) {
						this.selected_from_start.style.display = "none"
						this.selected_to_end.style.display = "none"
						this.selected.style.display = "block"
						this.selected.style.width = (this.values.end - this.values.start) * this.step + 'px';
						this.selected.style.left = this.values.start * this.step + 'px';		
					} else {
						this.selected.style.display = "none"
						this.selected_from_start.style.display = "block"
						this.selected_to_end.style.display = "block"
						this.selected_from_start.style.width = (this.values.end) * this.step + 'px';
						this.selected_from_start.style.left = 0 * this.step + 'px';		
						this.selected_to_end.style.width = (this.options.values.length - 1 - this.values.start) * this.step + 'px';
						this.selected_to_end.style.left = this.values.start * this.step + 'px';		
					}

					// fire 'input' event
					this.input.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));
					
					return this.onChange();
				},

				onClickPiece: function (e) {

					if (this.options.disabled) return;

					var idx = Math.round((e.clientX - this.sliderLeft) / this.step);

					if (idx > this.options.values.length - 1) idx = this.options.values.length - 1;
					if (idx < 0) idx = 0;

					if (this.options.range) {
						if (idx - this.values.start <= this.values.end - idx) {
							this.values.start = idx;
						}
						else this.values.end = idx;
					}
					else this.values.end = idx;

					this.slider.classList.remove('sliding');

					return this.setValues();
				},

				onChange: function () {
					var _this = this;
					if (this.timeout) clearTimeout(this.timeout);

					this.timeout = setTimeout(function () {
						// fire 'input' event
						// _this.input.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));

					}, 500);
					return this.slider;
				},

				onResize: function () {
					this.sliderLeft = this.slider.getBoundingClientRect().left;
					this.sliderWidth = this.slider.clientWidth;
					return this.updateScale();
				},

				disabled: function (disabled) {
					this.options.disabled = disabled;
					this.slider.classList[disabled ? 'add' : 'remove']('disabled');
				},

				getValue: function () {
					return this.input.value;
				},

				destroy: function () {
					this.input.style.display = this.inputDisplay;
					this.slider.remove();
				},

				showResultMessage: function() {
					this.result_message.innerHTML = "Запрещено отправлять уведомления с " + this.formatTime(this.options.values[this.values.start]) + "  до " + this.formatTime(this.options.values[this.values.end]) + "!"
				}
			});

			ui["RangeSlider"] = UIRangeSlider;


			// helpers
			var createElement = function (el, cls, dataAttr) {
				var element = document.createElement(el);
				if (cls) element.className = cls;
				if (dataAttr && dataAttr.length === 2)
					element.setAttribute('data-' + dataAttr[0], dataAttr[1]);

				return element;
			},

			createEvents = function (el, ev, callback) {
				var events = ev.split(' ');

				for (var i = 0, iLen = events.length; i < iLen; i++)
					el.addEventListener(events[i], callback);
			},

			prepareArrayValues = function (conf) {
				var values = [],
					range = conf.values.max - conf.values.min;

				if (!conf.step) {
					console.log('No step defined...');
					return [conf.values.min, conf.values.max];
				}

				for (var i = 0, iLen = (range / conf.step); i < iLen; i++)
					values.push(conf.values.min + i * conf.step);

				if (values.indexOf(conf.values.max) < 0) values.push(conf.values.max);

				return values;
			},

			checkInitial = function (conf) {
				if (!conf.set || conf.set.length < 1) return null;
				if (conf.values.indexOf(conf.set[0]) < 0) return null;

				if (conf.range) {
					if (conf.set.length < 2 || conf.values.indexOf(conf.set[1]) < 0) return null;
				}
				return true;
			},

			deleteTheSlider = function (ttt) {
				console.log(ttt)
				var _this = this;

				if (this.timeout) clearTimeout(this.timeout);

				this.timeout = setTimeout(function () {
					if (_this.options.onDelete && typeof _this.options.onDelete === 'function') {			
						return _this.options.onDelete();
					}
				}, 200);
			},

			addNewSlider = function () {
				var _this = this;

				if (this.timeout) clearTimeout(this.timeout);

				this.timeout = setTimeout(function () {
					if (_this.options.onDelete && typeof _this.options.onDelete === 'function') {			
						return _this.options.onAddNew();
					}
				}, 200);
			};
		});
	});
});
//]]>
</script>
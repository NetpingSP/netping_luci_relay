<script type="text/javascript">
//<![CDATA[
L.require("dom").then(function(dom)	{
	L.require("ui").then(function(ui)	{
		var TextFieldStyled = ui.Textfield.extend({
			render: function() {
				var frameEl = E('div', { 'id': this.options.id });
				var inputEl = E('input', {
					'id': this.options.id ? 'widget.' + this.options.id : null,
					'name': this.options.name,
					'type': 'text',
					'class': this.options.password ? 'cbi-input-password' : 'cbi-input-text',
					'readonly': this.options.readonly ? '' : null,
					'disabled': this.options.disabled ? '' : null,
					'maxlength': this.options.maxlength,
					'placeholder': this.options.placeholder,
					'value': this.value,
					'style': this.options.htmlStyle
				});

				if (this.options.password) {
					
					frameEl.appendChild(E('div', { 'class': 'control-group' }, [
						inputEl,

						E('button', {
							'class': 'cbi-button cbi-button-neutral',
							'title': _('Reveal/hide password'),
							'aria-label': _('Reveal/hide password'),
							'click': function(ev) {
								console.log("MMM")
								var e = this.previousElementSibling;
								e.type = (e.type === 'password') ? 'text' : 'password';
								ev.preventDefault();
							}
						}, 'âˆ—')
					
					]));

					window.requestAnimationFrame(function() { inputEl.type = 'password' });


				}
				else {
					frameEl.appendChild(inputEl);
				}

				return this.bind(frameEl);
			},
			/** @override */
			getValue: function() {
				var inputEl = this.node.querySelector('input');
				return inputEl.value;
			},
			bind: function(frameEl) {
				var inputEl = frameEl.querySelector('input');

				this.node = frameEl;

				this.setUpdateEvents(inputEl, 'keyup', 'blur');
				this.setChangeEvents(inputEl, 'change');

				dom.bindClassInstance(frameEl, this);

				return frameEl;
			}
		})
		ui["TextFieldStyled"] = TextFieldStyled;
	})
})
//]]>
</script>